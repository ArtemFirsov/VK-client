//
//  NewsFeedPresenter.swift
//  VK-client
//
//  Created by Artem Firsov on 10/28/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsFeedPresentationLogic
{
    func presentSomething(response: NewsFeed.Something.Response.ResponseType)
}

class NewsFeedPresenter: NewsFeedPresentationLogic
{
  weak var viewController: NewsFeedDisplayLogic?
    
    var cellSizeCalculator: SizeCalculatorProtocol = SizeCalculator(screenWidth: UIScreen.main.bounds.width)

    let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.dateFormat = "d MMM 'Ð²' HH:mm"
        return formatter
    }()
  // MARK: Do something
  
    func presentSomething(response: NewsFeed.Something.Response.ResponseType)
  {
//        let viewModel = NewsFeed.Something.ViewModel.ViewModelData()
//    viewController?.displaySomething(viewModel: viewModel)
        
        switch response {
        case .some:
            print("some presenter")
//        case .presentNewsFeed:
//            print("feed presenter")
//            viewController?.displaySomething(viewModel: .displayNewsFeed)
        case .presentNewsFeed(feed: let feed):
            let cells = feed.items.map { (newsItem) in
                cellViewModel(from: newsItem, profiles: feed.profiles, groups: feed.groups)
            }
            let feedViewModel = FeedViewModel.init(cells: cells)
            viewController?.displaySomething(viewModel: .displayNewsFeed(feedViewModel: feedViewModel))
        }
        
  }
    
    
    
    func cellViewModel(from feedItem: News, profiles: [Profile], groups: [Group]) -> FeedViewModel.Cell {
        
        let post = post(for: feedItem.sourceID, profiles: profiles, groups: groups)
        let postImage = postAttachment(feedItem: feedItem)
        let sizes = cellSizeCalculator.sizes(postText: feedItem.text, postImage: postImage)
        let date = Date(timeIntervalSince1970: feedItem.date)
        let datelLabel = dateFormatter.string(from: date)
//        print(sizes)
        
        return FeedViewModel.Cell.init(avatarImageUrl: post.photo,
                                       name: post.name,
                                       date: datelLabel,
                                       postText: feedItem.text,
                                       likes: String(feedItem.likes?.count ?? 0),
                                       views: String(feedItem.views?.count ?? 0),
                                       comments: String(feedItem.comments?.count ?? 0),
                                       shares: String(feedItem.reposts?.count ?? 0),
                                       postImage: postImage,
                                       sizes: sizes)
        
    }
    
    private func post(for sourceId: Int, profiles: [Profile], groups: [Group]) -> PostRepresentable {
        
        let maybePostItem: [PostRepresentable] = sourceId >= 0 ? profiles : groups
        let normalSourceId = sourceId >= 0 ? sourceId : -sourceId
        let postRepresentable = maybePostItem.first { myPostRepresentable in
            myPostRepresentable.id == normalSourceId
        }
        
        return postRepresentable!
    }
    
    private func postAttachment(feedItem: News) -> FeedViewModel.PostImageViewModel? {

        guard let photos = feedItem.attachments?.compactMap({ (attachment) in
            attachment.photo
        }), let firstPhoto = photos.first else { return nil }
        return FeedViewModel.PostImageViewModel.init(postPhotoUrl: firstPhoto.url, width: firstPhoto.width, height: firstPhoto.height)
        
    }
    
    
    
}
